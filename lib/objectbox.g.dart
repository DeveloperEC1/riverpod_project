// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/models/activities_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 1340219914884489183),
      name: 'ActivitiesModel',
      lastPropertyId: const IdUid(8, 3355033257893873778),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2799064268227633869),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4559709671795437926),
            name: 'activity',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4458440145937714443),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 799071338036661430),
            name: 'participants',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 800618598985247629),
            name: 'link',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3169262022461722276),
            name: 'key',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 1340219914884489183),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [5788514939070495532],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        6676600451827140482,
        8125858274688974175,
        4986972280128883939,
        3051769538903389671,
        7924711319947453250,
        2179329984912906335,
        7704156817749290466,
        8142160169920548244,
        1580052332813176949,
        2709354203586908039,
        4925416794264091475,
        3779738329430608850,
        6664435693509081332,
        9217832627989040780,
        8418095341156710762,
        4769928590305550073,
        3355033257893873778
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ActivitiesModel: EntityDefinition<ActivitiesModel>(
        model: _entities[0],
        toOneRelations: (ActivitiesModel object) => [],
        toManyRelations: (ActivitiesModel object) => {},
        getId: (ActivitiesModel object) => object.id,
        setId: (ActivitiesModel object, int id) {
          object.id = id;
        },
        objectToFB: (ActivitiesModel object, fb.Builder fbb) {
          final activityOffset = fbb.writeString(object.activity);
          final typeOffset = fbb.writeString(object.type);
          final linkOffset = fbb.writeString(object.link);
          final keyOffset = fbb.writeString(object.key);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, activityOffset);
          fbb.addOffset(2, typeOffset);
          fbb.addInt64(3, object.participants);
          fbb.addOffset(5, linkOffset);
          fbb.addOffset(6, keyOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ActivitiesModel()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..activity = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..type = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..participants =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..link = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..key = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '');

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ActivitiesModel] entity fields to define ObjectBox queries.
class ActivitiesModel_ {
  /// see [ActivitiesModel.id]
  static final id =
      QueryIntegerProperty<ActivitiesModel>(_entities[0].properties[0]);

  /// see [ActivitiesModel.activity]
  static final activity =
      QueryStringProperty<ActivitiesModel>(_entities[0].properties[1]);

  /// see [ActivitiesModel.type]
  static final type =
      QueryStringProperty<ActivitiesModel>(_entities[0].properties[2]);

  /// see [ActivitiesModel.participants]
  static final participants =
      QueryIntegerProperty<ActivitiesModel>(_entities[0].properties[3]);

  /// see [ActivitiesModel.link]
  static final link =
      QueryStringProperty<ActivitiesModel>(_entities[0].properties[4]);

  /// see [ActivitiesModel.key]
  static final key =
      QueryStringProperty<ActivitiesModel>(_entities[0].properties[5]);
}
